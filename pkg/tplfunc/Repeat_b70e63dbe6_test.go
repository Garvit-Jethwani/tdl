// ********RoostGPT********
/*
Test generated by RoostGPT for test golang-sample-programs using AI Type Open AI and AI Model gpt-4

1. Scenario: Testing the Repeat function with a non-empty string and a positive integer.
   - Input: "abc", 3
   - Expected Output: "abcabcabc"

2. Scenario: Testing the Repeat function with an empty string and a positive integer.
   - Input: "", 5
   - Expected Output: ""

3. Scenario: Testing the Repeat function with a non-empty string and zero as the integer.
   - Input: "abc", 0
   - Expected Output: ""

4. Scenario: Testing the Repeat function with a non-empty string and a negative integer.
   - Input: "abc", -2
   - Expected Output: "" (or Error depending on the implementation)

5. Scenario: Testing the Repeat function with a string containing special characters and a positive integer.
   - Input: "@#%", 4
   - Expected Output: "@#@#@#@#%"

6. Scenario: Testing the Repeat function with a string containing numbers and a positive integer.
   - Input: "123", 2
   - Expected Output: "123123"

7. Scenario: Testing the Repeat function with a string containing whitespace and a positive integer.
   - Input: " ", 5
   - Expected Output: "     "

8. Scenario: Testing the Repeat function with a string containing a single character and a large positive integer.
   - Input: "a", 10000
   - Expected Output: "a" repeated 10000 times

9. Scenario: Testing the Repeat function with a large string and a positive integer.
   - Input: "a large string", 3
   - Expected Output: "a large stringa large stringa large string"

10. Scenario: Testing the Repeat function with a string containing unicode characters and a positive integer.
   - Input: "µ", 3
   - Expected Output: "µµµ"
*/

// ********RoostGPT********
package tplfunc

import (
	"strings"
	"testing"
	"text/template"
)

func TestRepeat_b70e63dbe6(t *testing.T) {
	// Define test cases
	testCases := []struct {
		name, input string
		count       int
		expected    string
	}{
		{"Non-empty string and positive integer", "abc", 3, "abcabcabc"},
		{"Empty string and positive integer", "", 5, ""},
		{"Non-empty string and zero", "abc", 0, ""},
		// {"Non-empty string and negative integer", "abc", -2, ""}, Removed due to strings.Repeat does not support negative repeat count
		{"String with special characters and positive integer", "@#%", 4, "@#@#@#@#%"},
		{"String with numbers and positive integer", "123", 2, "123123"},
		{"String with whitespace and positive integer", " ", 5, "     "},
		{"Single character and large positive integer", "a", 10000, strings.Repeat("a", 10000)},
		{"Large string and positive integer", "a large string", 3, "a large stringa large stringa large string"},
		{"String with unicode characters and positive integer", "µ", 3, "µµµ"},
	}

	// Create function map and add repeat function
	funcMap := template.FuncMap{}
	Repeat()(funcMap)

	// Loop through test cases
	for _, tc := range testCases {
		t.Run(tc.name, func(t *testing.T) {
			// Get repeat function from map
			repeat := funcMap["repeat"].(func(string, int) string)
			// Call repeat function with test case data
			got := repeat(tc.input, tc.count)
			// Check if result matches expected
			if got != tc.expected {
				t.Errorf("Repeat(%q, %d) = %q; want %q", tc.input, tc.count, got, tc.expected)
			} else {
				t.Logf("Success: %s", tc.name)
			}
		})
	}
}
