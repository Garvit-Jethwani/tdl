// ********RoostGPT********
/*
Test generated by RoostGPT for test golang-sample-programs using AI Type Open AI and AI Model gpt-4

1. Scenario: Testing the Repeat function with a non-empty string and a positive integer.
Input: ("abc", 3)
Expected Output: "abcabcabc"

2. Scenario: Testing the Repeat function with an empty string and a positive integer.
Input: ("", 5)
Expected Output: ""

3. Scenario: Testing the Repeat function with a non-empty string and zero.
Input: ("abc", 0)
Expected Output: ""

4. Scenario: Testing the Repeat function with a non-empty string and a negative integer.
Input: ("abc", -3)
Expected Output: ""

5. Scenario: Testing the Repeat function with a string that contains special characters and a positive integer.
Input: ("@#%", 5)
Expected Output: "@#%@#%@#%@#%@#%"

6. Scenario: Testing the Repeat function with a string that contains numbers and a positive integer.
Input: ("123", 4)
Expected Output: "123123123123"

7. Scenario: Testing the Repeat function with a string that contains spaces and a positive integer.
Input: (" ab ", 2)
Expected Output: " ab  ab "

8. Scenario: Testing the Repeat function with a string that contains unicode characters and a positive integer.
Input: ("こんにちは", 2)
Expected Output: "こんにちはこんにちは"

9. Scenario: Testing the Repeat function with a string that is a single character and a positive integer.
Input: ("a", 10)
Expected Output: "aaaaaaaaaa"

10. Scenario: Testing the Repeat function with a string that is a single space and a positive integer.
Input: (" ", 5)
Expected Output: "     "
*/

// ********RoostGPT********
func Repeat() Func {
	return func(funcMap template.FuncMap) {
		funcMap["repeat"] = func(s string, n int) string {
			if n < 0 {
				return ""
			}
			return strings.Repeat(s, n)
		}
	}
}
