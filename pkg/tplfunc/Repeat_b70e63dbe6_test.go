// ********RoostGPT********
/*
Test generated by RoostGPT for test golang-sample-programs using AI Type Open AI and AI Model gpt-4

1. Scenario: Testing the Repeat function with a non-empty string and a positive integer. 
   - Input: String "abc", Integer 3
   - Expected Output: "abcabcabc"

2. Scenario: Testing the Repeat function with an empty string and a positive integer.
   - Input: Empty String "", Integer 5
   - Expected Output: ""

3. Scenario: Testing the Repeat function with a non-empty string and zero.
   - Input: String "def", Integer 0
   - Expected Output: ""

4. Scenario: Testing the Repeat function with a string containing special characters and a positive integer.
   - Input: String "@#!", Integer 4
   - Expected Output: "@#!@#!@#!@#!"

5. Scenario: Testing the Repeat function with a string containing numeric characters and a positive integer.
   - Input: String "123", Integer 2
   - Expected Output: "123123"

6. Scenario: Testing the Repeat function with a string containing alphanumeric characters and a positive integer.
   - Input: String "abc123", Integer 3
   - Expected Output: "abc123abc123abc123"

7. Scenario: Testing the Repeat function with a string containing spaces and a positive integer.
   - Input: String " a b c ", Integer 2
   - Expected Output: " a b c  a b c "

8. Scenario: Testing the Repeat function with a string containing uppercase characters and a positive integer.
   - Input: String "ABC", Integer 3
   - Expected Output: "ABCABCABC"

9. Scenario: Testing the Repeat function with a string containing a mix of uppercase, lowercase, numeric and special characters and a positive integer.
   - Input: String "Abc123!@#", Integer 2
   - Expected Output: "Abc123!@#Abc123!@#"

10. Scenario: Testing the Repeat function with a negative integer. 
    - Input: String "abc", Integer -1
    - Expected Output: Error or Exception (as the Repeat function in GoLang does not support negative counts)
*/

// ********RoostGPT********
package tplfunc

import (
	"testing"
	"text/template"
)

func TestRepeat_b70e63dbe6(t *testing.T) {
	repeatFunc := Repeat()
	funcMap := template.FuncMap{}
	repeatFunc(funcMap)

	repeat, ok := funcMap["repeat"].(func(string, int) string)
	if !ok {
		t.Fatal("Failed to assert 'repeat' function type.")
	}

	testCases := []struct {
		name           string
		inputString    string
		inputCount     int
		expected       string
		expectingError bool
	}{
		{"non-empty string and a positive integer", "abc", 3, "abcabcabc", false},
		{"empty string and a positive integer", "", 5, "", false},
		{"non-empty string and zero", "def", 0, "", false},
		{"string containing special characters and a positive integer", "@#!", 4, "@#!@#!@#!@#!", false},
		{"string containing numeric characters and a positive integer", "123", 2, "123123", false},
		{"string containing alphanumeric characters and a positive integer", "abc123", 3, "abc123abc123abc123", false},
		{"string containing spaces and a positive integer", " a b c ", 2, " a b c  a b c ", false},
		{"string containing uppercase characters and a positive integer", "ABC", 3, "ABCABCABC", false},
		{"string containing a mix of uppercase, lowercase, numeric and special characters and a positive integer", "Abc123!@#", 2, "Abc123!@#Abc123!@#", false},
		{"string and a negative integer", "abc", -1, "", true},
	}

	for _, tc := range testCases {
		t.Run(tc.name, func(t *testing.T) {
			defer func() {
				if r := recover(); r != nil {
					if tc.expectingError {
						t.Logf("Expected error and got error: %v", r)
					} else {
						t.Errorf("Did not expect error but got: %v", r)
					}
				}
			}()

			got := repeat(tc.inputString, tc.inputCount)

			if got != tc.expected && !tc.expectingError {
				t.Errorf("Failed: %s: repeat(%q, %d): expected %q, got %q", tc.name, tc.inputString, tc.inputCount, tc.expected, got)
			}
		})
	}
}
