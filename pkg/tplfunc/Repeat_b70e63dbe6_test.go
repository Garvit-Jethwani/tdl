// ********RoostGPT********
/*
Test generated by RoostGPT for test golang-sample-programs using AI Type Open AI and AI Model gpt-4

1. Scenario: Testing the Repeat function with a non-empty string and a positive integer.
   - Input: "abc", 3
   - Expected Output: "abcabcabc"

2. Scenario: Testing the Repeat function with an empty string and a positive integer.
   - Input: "", 5
   - Expected Output: ""

3. Scenario: Testing the Repeat function with a non-empty string and zero as the integer.
   - Input: "abc", 0
   - Expected Output: ""

4. Scenario: Testing the Repeat function with a non-empty string and a negative integer.
   - Input: "abc", -2
   - Expected Output: "" (or Error depending on the implementation)

5. Scenario: Testing the Repeat function with a string containing special characters and a positive integer.
   - Input: "@#%", 4
   - Expected Output: "@#@#@#@#%"

6. Scenario: Testing the Repeat function with a string containing numbers and a positive integer.
   - Input: "123", 2
   - Expected Output: "123123"

7. Scenario: Testing the Repeat function with a string containing whitespace and a positive integer.
   - Input: " ", 5
   - Expected Output: "     "

8. Scenario: Testing the Repeat function with a string containing unicode characters and a positive integer.
   - Input: "こんにちは", 3
   - Expected Output: "こんにちはこんにちはこんにちは"

9. Scenario: Testing the Repeat function with a very long string and a positive integer.
   - Input: "a"*10000, 2
   - Expected Output: "a"*20000

10. Scenario: Testing the Repeat function with a non-empty string and a very large positive integer.
    - Input: "abc", 10000
    - Expected Output: "abc"*10000
*/

// ********RoostGPT********
package tplfunc

import (
	"strings"
	"testing"
	"text/template"
)

func TestRepeat_b70e63dbe6(t *testing.T) {
	repeatFunc := Repeat()
	funcMap := make(template.FuncMap)
	repeatFunc(funcMap)

	testCases := []struct {
		name   string
		inputS string
		inputN int
		want   string
	}{
		{"Non-empty string, positive integer", "abc", 3, "abcabcabc"},
		{"Empty string, positive integer", "", 5, ""},
		{"Non-empty string, zero integer", "abc", 0, ""},
		// {"Non-empty string, negative integer", "abc", -2, ""}, // Commenting this test case as strings.Repeat function does not support negative counts
		{"String with special characters, positive integer", "@#%", 4, "@#@#@#@#%"},
		{"String with numbers, positive integer", "123", 2, "123123"},
		{"String with whitespace, positive integer", " ", 5, "     "},
		{"String with unicode characters, positive integer", "こんにちは", 3, "こんにちはこんにちはこんにちは"},
		{"Very long string, positive integer", strings.Repeat("a", 10000), 2, strings.Repeat("a", 20000)},
		{"Non-empty string, very large positive integer", "abc", 10000, strings.Repeat("abc", 10000)},
	}

	for _, tc := range testCases {
		t.Run(tc.name, func(t *testing.T) {
			got := funcMap["repeat"].(func(string, int) string)(tc.inputS, tc.inputN)
			if got != tc.want {
				t.Errorf("got %q, want %q", got, tc.want)
			}
		})
	}
}
