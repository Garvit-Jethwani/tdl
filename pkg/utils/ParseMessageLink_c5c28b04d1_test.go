// ********RoostGPT********
/*
Test generated by RoostGPT for test golang-sample-programs using AI Type Open AI and AI Model gpt-4

1. Scenario: Valid Message Link
   - Description: Test with a valid message link that is correctly formatted and leads to a valid message in a channel or chat. The function should return the correct Peer and message ID without any errors.

2. Scenario: Invalid Message Link
   - Description: Test with an invalid message link. The function should return an error message stating that the link is invalid.

3. Scenario: Message Link with Comment
   - Description: Test with a message link that includes a comment query parameter. The function should return the Peer and message ID of the linked comment.

4. Scenario: Non-Broadcast Channel
   - Description: Test with a message link that leads to a non-broadcast channel. The function should return an error stating that the channel is not a broadcast channel.

5. Scenario: No Linked Chat
   - Description: Test with a message link from a channel that does not have a linked chat. The function should return an error stating that there is no linked chat.

6. Scenario: Invalid Message ID in Link
   - Description: Test with a message link that includes a non-integer message ID. The function should return an error stating that the message ID could not be parsed.

7. Scenario: Non-existent Peer in Link
   - Description: Test with a message link that includes a peer that does not exist. The function should return an error stating that the input peer could not be found.

8. Scenario: Message Link with Extra Paths
   - Description: Test with a message link that includes extra paths. The function should return an error stating that the link is invalid.

9. Scenario: Message Link with Missing Paths
   - Description: Test with a message link that is missing necessary paths. The function should return an error stating that the link is invalid.

10. Scenario: Message Link with Incorrect Prefix
    - Description: Test with a message link that does not start with the correct prefix. The function should return an error stating that the link is invalid.
*/

// ********RoostGPT********
package utils

import (
	"context"
	"testing"

	"github.com/gotd/td/telegram/peers"
	"github.com/gotd/td/tg"
)

type mockClient struct{}

func (m *mockClient) ContactsResolveUsername(ctx context.Context, request *tg.ContactsResolveUsernameRequest) (*tg.ContactsResolvedPeer, error) {
	return &tg.ContactsResolvedPeer{}, nil
}

func TestParseMessageLink_c5c28b04d1(t *testing.T) {
	// Create a mock manager with a mock client
	mockManager := &peers.Manager{
		API: &mockClient{},
	}

	// Test data
	tests := []struct {
		name    string
		link    string
		wantErr bool
	}{
		{
			name:    "Valid Message Link",
			link:    "https://t.me/channel/123",
			wantErr: false,
		},
		{
			name:    "Invalid Message Link",
			link:    "https://t.me/invalid",
			wantErr: true,
		},
		{
			name:    "Message Link with Comment",
			link:    "https://t.me/channel/123?comment=456",
			wantErr: false,
		},
		{
			name:    "Non-Broadcast Channel",
			link:    "https://t.me/group/123",
			wantErr: true,
		},
		{
			name:    "No Linked Chat",
			link:    "https://t.me/channel_without_linked_chat/123",
			wantErr: true,
		},
		{
			name:    "Invalid Message ID in Link",
			link:    "https://t.me/channel/not_an_integer",
			wantErr: true,
		},
		{
			name:    "Non-existent Peer in Link",
			link:    "https://t.me/non_existent_peer/123",
			wantErr: true,
		},
		{
			name:    "Message Link with Extra Paths",
			link:    "https://t.me/c/12345/123/extra",
			wantErr: true,
		},
		{
			name:    "Message Link with Missing Paths",
			link:    "https://t.me/c/12345",
			wantErr: true,
		},
		{
			name:    "Message Link with Incorrect Prefix",
			link:    "http://t.me/c/12345/123",
			wantErr: true,
		},
	}

	// Run tests
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			p := telegram{}
			_, _, err := p.ParseMessageLink(context.Background(), mockManager, tt.link)
			if (err != nil) != tt.wantErr {
				t.Errorf("ParseMessageLink() error = %v, wantErr %v", err, tt.wantErr)
			}
		})
	}
}
