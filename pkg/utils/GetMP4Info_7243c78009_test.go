// ********RoostGPT********
/*
Test generated by RoostGPT for test golang-sample-programs using AI Type Open AI and AI Model gpt-4

1. **Scenario: Valid MP4 file with H264 codec track**
   Input: A valid MP4 file with at least one H264 codec track.
   Expected Output: The duration of the MP4 file, the width and height of the H264 track, and no error.

2. **Scenario: Valid MP4 file without H264 codec track**
   Input: A valid MP4 file with no H264 codec track.
   Expected Output: 0, 0, 0 and an error stating "no h264 track found".

3. **Scenario: Invalid MP4 file**
   Input: An invalid MP4 file or a file that is not an MP4 file.
   Expected Output: 0, 0, 0 and an error related to the inability to read the file or parse the file as an MP4 file.

4. **Scenario: Null or empty input**
   Input: Null or an empty ReadSeeker.
   Expected Output: 0, 0, 0 and an error related to the inability to read from the input.

5. **Scenario: Large MP4 file**
   Input: A large MP4 file.
   Expected Output: The function should be able to handle large files and return the correct duration, width, and height without error.

6. **Scenario: MP4 file with multiple H264 tracks**
   Input: An MP4 file with more than one H264 track.
   Expected Output: The duration of the MP4 file, the width and height of the first H264 track encountered, and no error.

7. **Scenario: MP4 file with non-H264 codec tracks**
   Input: An MP4 file with tracks using codecs other than H264.
   Expected Output: 0, 0, 0 and an error stating "no h264 track found".

8. **Scenario: MP4 file with corrupted or incomplete H264 track**
   Input: An MP4 file that contains a corrupted or incomplete H264 track.
   Expected Output: 0, 0, 0 and an error related to the inability to parse or read the H264 track.
*/

// ********RoostGPT********
package utils

import (
	"io"
	"strings"
	"testing"
)

type testMedia struct{}

// TestGetMP4Info_7243c78009 tests the GetMP4Info function
func TestGetMP4Info_7243c78009(t *testing.T) {
	var tests = []struct {
		input                   io.ReadSeeker
		duration, width, height int
		err                     string
	}{
		{strings.NewReader("valid MP4 file with H264 codec track"), 100, 720, 480, ""},
		{strings.NewReader("valid MP4 file without H264 codec track"), 0, 0, 0, "no h264 track found"},
		{strings.NewReader("invalid MP4 file"), 0, 0, 0, "invalid MP4 file"},
		{nil, 0, 0, 0, "invalid input"},
		{strings.NewReader("large MP4 file"), 200, 1080, 720, ""},
		{strings.NewReader("MP4 file with multiple H264 tracks"), 100, 720, 480, ""},
		{strings.NewReader("MP4 file with non-H264 codec tracks"), 0, 0, 0, "no h264 track found"},
		{strings.NewReader("MP4 file with corrupted or incomplete H264 track"), 0, 0, 0, "invalid H264 track"},
	}

	m := testMedia{}

	for _, test := range tests {
		duration, width, height, err := m.GetMP4Info(test.input)
		if duration != test.duration || width != test.width || height != test.height || (err != nil && err.Error() != test.err) || (err == nil && test.err != "") {
			t.Errorf("GetMP4Info(%v) = (%v, %v, %v, %v), want (%v, %v, %v, %v)", test.input, duration, width, height, err, test.duration, test.width, test.height, test.err)
		}
	}
}
