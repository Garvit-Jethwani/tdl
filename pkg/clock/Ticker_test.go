// ********RoostGPT********
/*
Test generated by RoostGPT for test go-test-tdl using AI Type Azure Open AI and AI Model roostgpt-4-32k

ROOST_METHOD_HASH=Ticker_a257886378
ROOST_METHOD_SIG_HASH=Ticker_699667df08

Scenario 1: Valid Duration of Ticker

Details: 
Description: This test is meant to check the behavior of the Ticker function when provided with a valid duration. The scenario target is the normal operation of creating a system clock ticker with a specified duration.

Execution:
Arrange: Initialize a networkClock struct with a set offset. Create a set duration. In this test we can set duration to be equal to 5 seconds.
Act: Invoke the Ticker function with the initialized networkClock and duration.
Assert: Use Go testing facilities to verify that the returned ticker ticks at intervals equal to the duration passed.

Validation: 
We choose this assertion since the ticker's purpose is to tick at intervals equal to the passed duration. The test is important to guarantee the correct operation of system level time related processes that rely on the ticker's accurate ticking.

Scenario 2: Zero Duration of Ticker

Details: 
Description: This test is meant to check the behavior of the Ticker function when provided with a zero duration. The scenario target is to handle this specific edge case and ensure the function works correctly.

Execution:
Arrange: Initialize a networkClock struct with a set offset. Set duration to zero.
Act: Invoke the Ticker function with the initialized networkClock and duration.
Assert: Use Go testing facilities to verify that the returned ticker ticks immediately and continuously, as it is the behavior defined by Go's time package for zero durations.

Validation: 
We choose this assertion based on the time package's definition of a zero duration. This test is important as zero duration might result from dynamic calculations and this ensures ticker function behaves according to the defined standard for such scenarios.

Scenario 3: Negative Duration of Ticker

Details:
Description: This test is meant to check the behavior of the Ticker function when provided with a negative duration. This scenario targets handling this specific edge case and ensure the function works correctly.

Execution:
Arrange: Initialize a networkClock struct with a set offset. Set duration to a negative value.
Act: Invoke the Ticker function with the initialized networkClock and duration.
Assert: According to Go's time package, a ticker with a negative duration should not tick. Use Go testing facilities to verify that the returned ticker does not tick.

Validation:
We choose this assertion based on Go's time package behavior for a ticker with a negative duration. Testing such an edge case is important to guard against potential errors in duration calculations.
*/

// ********RoostGPT********
package clock

import (
	"testing"
	"time"
)

func TestTicker(t *testing.T) {
	type testCase struct {
		desc     string
		offset   time.Duration
		duration time.Duration
		expected int
	}

	tests := []testCase{
		{
			desc:     "Valid Duration of Ticker",
			offset:   time.Second * 2,
			duration: time.Second * 5,
			expected: 5,
		},
		{
			desc:     "Zero Duration of Ticker",
			offset:   time.Second * 2,
			duration: time.Duration(0),
			expected: 1,
		},
		{
			desc:     "Negative Duration of Ticker",
			offset:   time.Second * 2,
			duration: -time.Second * 5,
			expected: 0,
		},
	}

	for _, test := range tests {
		t.Run(test.desc, func(t *testing.T) {
			n := networkClock{offset: test.offset} // initialising networkClock
			ticker := n.Ticker(test.duration)
			defer ticker.Stop()

			// create a timer to not get stuck forever in the select block if test fails
			timer := time.NewTimer(time.Second * 10)
			defer timer.Stop()

			select {
			case <-ticker.C():
				// If we have a negative duration, we shouldn't reach this case
				if test.expected == 0 {
					t.Errorf("Ticker ticked even with a negative duration")
				}
			case <-timer.C:
				// In case of positive duration the test should not reach here before ticker.C case
				if test.expected != 0 {
					t.Errorf("Ticker didn't tick for a positive duration")
				}
			}
		})
	}
}
